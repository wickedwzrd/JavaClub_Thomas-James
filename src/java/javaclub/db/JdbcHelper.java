/*
Name: Thomas Nevers/991 364 850
Description: This class is used to establish a connection to the database.
*/

package javaclub.db;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 * a helper class to interact with database using the JDBC API
 *
 * @author Song Ho Ahn
 * @author Paul Bonenfant
 *
 */
public class JdbcHelper {

    // to store the connection
    private Connection connection;

    // to store the last used PreparedStatement for re-use.
    private PreparedStatement activeStatement;
    
    // stores the last sql statement to create the PreparedStatement
    private String activeSql = "";

    // store a reference to the last used ResultSet
    private ResultSet resultSet;
    
    // last error message
    private String errorMessage = "";       

    /**
     * Establishes a connection to a database
     * @param url The url representing the database to connect to
     *            in the form jdbc:mysql://hostName/dbName"
     * @param user The user context that will be used to access the db
     * @param password The password corresponding to the user 
     * 
     * @return true if successfully connected, false otherwise
     */
    public boolean connect(String url, String user, String password) {
        try {
            errorMessage = "";

            // getConnection() requires 3 params: URL, user and password.
            // DriverManager will load the JDBC driver automatically based on URL.
            // NOTE: Tomcat requires Class.forName() to load driver properly
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(url, user, password);

        } catch (SQLException e) {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
            return false;
        } catch (Exception e) {
            errorMessage = e.getMessage();
            System.err.println(errorMessage);
            return false;
        }        
        return true;
    }

    /**
     * Release any resources and close connection to the database
     * It simply ignores any error generated by close()
     */
    public void disconnect() {
        activeSql = "";
        try {
            resultSet.close();
        } catch (Exception ignore) {}
        try {
            activeStatement.close();
        } catch (Exception ignore) {}
        try {
            connection.close();
        } catch (Exception ignore) {}
    }

    /**
     * Execute a row-returning query to the database. Sql is passed in as a 
     * template for creating a prepared statement and parameters are passed 
     * in as an ArrayList of Objects.
     * @param sql The sql to use to create the PreparedStatment
     * @param params The params required for the PreparedStatement as an
     *               ArrayList of Objects. Pass in null if there are no 
     *               parameters.
     * @return The ResultSet or null on error.
     * @see setParametersForPreparedStatement#setParameters
     */
    public ResultSet query(String sql, ArrayList<Object> params) {
        
        try {
            // clear error message
            errorMessage = "";
            // if sql statement changed, need to create new prepared statement
            if (!sql.equals(activeSql)) {
                activeStatement = connection.prepareStatement(sql);
                activeSql = sql;
            }
            // set all parameter values of prepared statement
            if (params != null) {
                setParameters(params);
            }
            // execute the prepared statement
            resultSet = activeStatement.executeQuery();
        } catch (SQLException e) {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
            return null;
        } catch (Exception e) {
            errorMessage = e.getMessage();
            System.err.println(errorMessage);
            return null;
        }
        return resultSet;
    }


    /**
     * Execute an update query to the database. Sql is passed in as a template
     * for creating a prepared statement and parameters are passed in as
     * an ArrayList of Objects.
     * @param sql The sql to use to create the PreparedStatment
     * @param params The params required for the PreparedStatement as an
     *               ArrayList of Objects. Pass in null if there are no 
     *               parameters.
     * @return The number of rows affected by the update, or -1 on error.
     * @see setParametersForPreparedStatement#setParameters
     */
    public int update(String sql, ArrayList<Object> params) {
        int result = -1;
        try {
            errorMessage = "";

            // if sql statement changed, need to create new prepared statement
            if (!sql.equals(activeSql)) {
                activeStatement = connection.prepareStatement(sql);
                activeSql = sql;
            }

            // set all params
            if (params != null) {
                setParameters(params);
            }

            // execute the prepared statement
            result = activeStatement.executeUpdate();
        } catch (SQLException e) {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        } catch (Exception e) {
            errorMessage = e.getMessage();
            System.err.println(errorMessage);
        }

        return result;
    }


    /**
     * Get the last error message that was generated as a result of a call
     * @return Last error message
     */
    public String getErrorMessage() {
        return errorMessage;
    }

    /**
     * Set the parameters of the prepared statement. It will cast each param 
     * to the proper data type before calling setXXX().
     * @param params An ArrayList of Objects to use as parameters. Note, you
     *               must use the wrapper classes for primitive types.
     * 
     * @throws SQLException 
     */
    private void setParameters(ArrayList<Object> params) 
            throws SQLException {
        for (int i = 0; i < params.size(); ++i) {
            Object param = params.get(i);
            if (param instanceof Integer) {
                activeStatement.setInt(i + 1, (int) param);
            } else if (param instanceof Double) {
                activeStatement.setDouble(i + 1, (double) param);
            } else if (param instanceof String) {
                activeStatement.setString(i + 1, (String) param);
            }
        }
    }
}